//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄


#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10
#define ZMK_MOUSE_SCRL_VAL 140

#include "../zmk-helpers/include/zmk-helpers/key-labels/klor.h"
#include "../zmk-helpers/include/zmk-helpers/helper.h"

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE   0
#define RAISE  1
#define LOWER  2
#define ADJUST 3

&led_strip { chain-length = <21>; };

#define XXX &none
#define TODO ___
#define ___ &trans

#define BASE 0
#define NAV 1
#define NUM 2
#define FUN 3
#define UTIL 4

#include "combos.dtsi"

/* ------------------------ general config ----------------------- */

#define QUICK_TAP_MS 175

// smart-layer config
&caps_word {  
    // /delete-property/ ignore-modifiers; // mods deactivate, requires PR #1451
    /delete-property/ ignore-numbers;
    continue-list = <BACKSPACE ENTER DELETE UNDERSCORE MINUS>;
};

// key-repeat config
&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; // repeat all keys
};

// sticky key aka 'one-shot mods'
&sk {
    release-after-ms = <2000>;
    quick-release;
};

// default layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 LEC REC                                   // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

&sensors {
    left_encoder { triggers-per-rotation = <15>; };

    right_encoder { triggers-per-rotation = <15>; };
};

/ {
    behaviors {
    
        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <150>;
            label = "scroll_up_down";
        };

        scroll_left_right: scroll_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <150>;   // Ensures the event is very brief
            label = "scroll_left_right";
        };

        change_input_method: change_input_method {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(SPACE)>, <&kp LC(SPACE)>;

            tap-ms = <150>;   // Ensures the event is very brief
            label = "change_input_method";
        };

    };

    combos {
        compatible = "zmk,combos";
        /*
        combo_closetab {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&macro_closetab>;
        };

        combo_lasttab {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&macro_lasttab>;
        }; */
    };

    macros {
        macro_closetab: macro_closetab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        macro_lasttab: macro_lasttab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LS(T)>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {

            label = "BASE";

            bindings = <
	                    &hml DOUBLE_QUOTES  Q   &hml GRAVE W    &kp E	&kp R	&kp T				&kp Y	&hmr UNDER U	&hmr EXCLAMATION I	&hmr SEMICOLON O	&kp P	
                XXX	&hml LEFT_SHIFT A	&hml LEFT_CONTROL S	&hml LEFT_ALT D	&hml LEFT_COMMAND F	&hml AT G				&kp H	&hmr RCMD J	&hmr RALT K	&hmr RSHFT L	&kp RETURN	XXX
                XXX	&kp Z	&kp X	&kp C	&kp V	&kp B	&kp C_MUTE		&kp C_PP	&kp N	&kp M	&hmr SQT COMMA	&hmr QUESTION DOT	&kp SLASH	XXX
			                                    XXX	&lt NUM TAB	&lt NAV SPACE	XXX		XXX	&kp BACKSPACE	&kp SPACE	&mo FUN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &scroll_up_down>;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        nav_layer {
            label = "NAV";

            bindings = <
       XXX        XXX  XXX        XXX  XXX                        XXX    &kp RC(UP_ARROW)  &kp EQUAL  &kp RG(TAB)         &kp RSHFT
XXX  &sk LEFT_SHIFT    &sk LEFT_CONTROL    	&sk LEFT_ALT   	&sk LEFT_COMMAND   XXX                       &kp PG_UP    &kp LEFT          &kp UP     &kp RIGHT           &kp C_NEXT  XXX
XXX  XXX  XXX     XXX       XXX   XXX  &kp C_MUTE  &kp C_PP  &kp PG_DN    &kp TAB           &kp DOWN   &kp RC(DOWN_ARROW)  &kp C_PREV  XXX
                                    &kp LEFT_SHIFT  &kp LALT    XXX     XXX       XXX     &kp DELETE  &kp RGUI          &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &scroll_left_right>;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        num_layer {

            label = "NUM";

            bindings = <
       XXX   &kp F9  &kp F10  &kp F11     &kp F12               XXX &kp N7         &kp N8     &kp N9     XXX
XXX   XXX   &kp F5   &kp F6   &kp F7    &kp F8                       &kp PERCENT      &kp N4       &kp N5  &kp N6  &kp EQUAL  XXX
XXX   XXX   &kp F1  &kp F2   &kp F3     &kp F4     &kp C_MUTE  &kp C_PP  &kp N0        &kp N1         &kp N2     &kp N3     &kp DOT     XXX
                             &kp TAB  &kp LEFT_COMMAND  &kp CAPS   XXX       XXX     &kp LC(SPACE)  &kp RG(SPACE)  &trans
            >;

            sensor-bindings =
                <&change_input_method>,
                <&inc_dec_kp C_NEXT C_PREV>;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        fun_layer {
            // ┌───────────────────────────────────────────────────────────┐

            label = "FUN";


            bindings = <
       &bt BT_CLR  XXX  XXX  XXX          XXX                                    XXX             XXX  XXX  XXX  &bt BT_CLR
XXX  &bt BT_NXT  &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LA(F))  XXX           XXX             XXX  XXX  XXX  &bt BT_NXT  XXX
XXX  &bt BT_PRV  XXX  XXX  XXX          &ext_power EP_OFF  &kp C_MUTE  &kp C_PP  &ext_power EP_ON  XXX  XXX  XXX  &bt BT_PRV  XXX
                          XXX  XXX          XXX              XXX       XXX     XXX             XXX  XXX
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV>;
        };
    };
};
